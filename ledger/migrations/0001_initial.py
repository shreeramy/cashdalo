# Generated by Django 3.0.1 on 2022-06-20 05:15

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CashLedgerReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('particulars', models.CharField(max_length=50)),
                ('received_amount', models.IntegerField(blank=True, null=True)),
                ('paid_amount', models.IntegerField(blank=True, null=True)),
                ('remarks', models.CharField(max_length=50)),
                ('receive_note_2000', models.IntegerField(blank=True, null=True)),
                ('receive_note_500', models.IntegerField(blank=True, null=True)),
                ('receive_note_200', models.IntegerField(blank=True, null=True)),
                ('receive_note_100', models.IntegerField(blank=True, null=True)),
                ('receive_note_50', models.IntegerField(blank=True, null=True)),
                ('receive_note_20', models.IntegerField(blank=True, null=True)),
                ('receive_note_10', models.IntegerField(blank=True, null=True)),
                ('receive_coin_5', models.IntegerField(blank=True, null=True)),
                ('receive_coin', models.IntegerField(blank=True, null=True)),
                ('paid_note_2000', models.IntegerField(blank=True, null=True)),
                ('paid_note_500', models.IntegerField(blank=True, null=True)),
                ('paid_note_200', models.IntegerField(blank=True, null=True)),
                ('paid_note_100', models.IntegerField(blank=True, null=True)),
                ('paid_note_50', models.IntegerField(blank=True, null=True)),
                ('paid_note_20', models.IntegerField(blank=True, null=True)),
                ('paid_note_10', models.IntegerField(blank=True, null=True)),
                ('paid_coin_5', models.IntegerField(blank=True, null=True)),
                ('paid_coin', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NoteAvailable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_2000', models.IntegerField()),
                ('note_500', models.IntegerField()),
                ('note_200', models.IntegerField()),
                ('note_100', models.IntegerField()),
                ('note_50', models.IntegerField()),
                ('note_20', models.IntegerField()),
                ('note_10', models.IntegerField()),
                ('coin_5', models.IntegerField()),
                ('coin', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=200, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
